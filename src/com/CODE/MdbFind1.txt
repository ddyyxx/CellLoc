package tong.mongo.loction;

import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import tong.mongo.defclass.Car;
import tong.mongo.defclass.CarOld;
import tong.mongo.defclass.Line;
import tong.mongo.defclass.MapLoc;
import tong.mongo.defclass.Point;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;

public class MdbFindPre {

	static Mongo connection = null;
	static DB db = null;
	static DBCollection dbcoll = null;
	static DBCollection coll = null;

	@SuppressWarnings({ "deprecation", "unchecked" })
	public static void main(String[] args) throws IOException, SQLException, ParseException {

		connection = new Mongo("127.0.0.1:27017");
		db = connection.getDB("MapLoc");

		MapLoc mLoc = new MapLoc();
		HashMap<Long, Point> pMap = new HashMap<Long, Point>();
		HashMap<Long, Line> lMap = new HashMap<Long, Line>();
		List<Long> aList = new LinkedList<Long>();
		DBObject object = null;
		DBCursor dbcsor = null;
		List<String> DBlist = new LinkedList<String>();

		dbcoll = db.getCollection("mapCar");
		DBlist = dbcoll.distinct("cid");

		System.out.println("num of cid:"+DBlist.size());
		for (String num : DBlist) {
			dbcsor = dbcoll.find(new BasicDBObject("cid", num));

			CarOld car = new CarOld(dbcsor.count());
			car.cid = Long.parseLong(num);

			pMap.clear();
			lMap.clear();
			aList.clear();

			// 对一辆车进行运算
			while (dbcsor.hasNext()) {
				DBObject cObject = dbcsor.next();
				String tim = (String) cObject.get("time");
				Map<String, Double> cmap = (Map<String, Double>) cObject
						.get("gis");
				double latt = cmap.get("lat");
				double lngg = cmap.get("lon");
				car.addPoint(latt, lngg, Double.parseDouble(tim));

				/*
				 * DBObject object = new BasicDBObject("gis", new
				 * BasicDBObject("$near", Arrays.asList(38.90688,
				 * 121.57875)).append("$maxDistance", 0.3 / 111.12));
				 */

				coll = db.getCollection("mapPoint");
				object = new BasicDBObject("gis", new BasicDBObject("$within",
						new BasicDBObject("$center", Arrays.asList(
								Arrays.asList(latt, lngg), 0.3 / 111.12))));
				DBCursor cursor = coll.find(object);

				// 找出一辆车行驶线路范围内的点
				while (cursor.hasNext()) {
					DBObject result = cursor.next();
					Long key = (Long) result.get("_id");

					if (!pMap.containsKey(key)) {
						Point p = new Point();
						Map<String, Double> m = (Map<String, Double>) result
								.get("gis");
						List<Long> list = (List<Long>) result.get("edge");
						Vector<Long> vtor = new Vector<Long>();
						vtor.addAll(list);
						p.id = (Long) result.get("_id");
						p.x = m.get("lat");
						p.y = m.get("lon");
						pMap.put(key, p);

						for (long v : vtor) {
							if (!aList.contains(v)) {
								aList.add(v);
							}
						}
					}
				}

				// 找出一辆车行驶线路范围内的线段
				coll = db.getCollection("mapArc");
				cursor = coll.find(new BasicDBObject("_id", new BasicDBObject(
						"$in", aList)));
				while (cursor.hasNext()) {
					DBObject result = cursor.next();
					Long key = (Long) result.get("_id");

					if (!lMap.containsKey(key)) {
						Line l = new Line();
						long id = (Long) result.get("_id");
						Map<String, Long> m = (Map<String, Long>) result
								.get("gis");
						double length = (Double) result.get("length");
						l.index = id;
						l.pid[0] = m.get("x");
						l.pid[1] = m.get("y");
						l.length = length;
						if (pMap.containsKey(l.pid[0])
								&& pMap.containsKey(l.pid[1])) {
							l.p[0] = pMap.get(l.pid[0]);
							l.p[1] = pMap.get(l.pid[1]);
							lMap.put(key, l);
						}
					}
				}
			}

			mLoc.PointNum = pMap.size();
			mLoc.LineNum = lMap.size();
			mLoc.PointSet = pMap;
			mLoc.LineSet = lMap;

			Estimate est = new Estimate();
			Vector<Long> street = new Vector<Long>();
//			Vector<LineSpeed> speed = new Vector<LineSpeed>();

			
			
			
			//存放所有的基站位置map（不含diff为1.0e8这种情况）
			Map<String , double[]> map_lteloc = new HashMap<String , double[]>();
			//获取基站位置
			String filename = "Zhengye_DriveTesting_08-18.09-07";
			CarAzimuthAll.getUniqLTELoc(filename,map_lteloc);
			System.out.println("基站数量："+map_lteloc.size());		

			//执行函数
			Car mycar ;
			mycar = CarAzimuthAll.readFileSolution(filename,map_lteloc);
			
			
			est.StreetEstimate(mLoc, mycar, street);
//			est.SpeedEstimate(mLoc, car, speed);

//			System.out.println(street.size());
//			for (int i = 0; i < street.size(); i++) {
//				System.out.println(street.get(i));
//			}
			//顺序是乱的
//			Map<Long, Double> link = new HashMap<Long, Double>();
//			for (int i = 0; i < speed.size(); i++) {
//				LineSpeed ls = speed.get(i);
//				link.put(ls.lineid, ls.speed);
//			}
			System.out.println("==============================");
			System.out.println(street.size());
			for (int i = 0; i < street.size(); i++) {
				//System.out.println(street.get(i)+" : "+link.get(street.get(i)));
				System.out.println(street.get(i));
			}
		}
		connection.close();
	}
}
