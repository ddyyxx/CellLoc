package tong.map.preprocess;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Writer;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.StringTokenizer;

public class CarPre {

	public static void main(String[] args) throws IOException {
		File finSize = new File("D:\\RoadText\\mongo\\MapPre\\Size.txt");
		File finCar = new File("D:\\RoadText\\mongo\\MapPre\\Car.txt");
		File foutCar = new File("D:\\RoadText\\mongo\\MongoDB\\mapCar.txt");

		InputStreamReader read = null;
		BufferedReader buf = null;
		Writer out = null;

		String str = null;
		String value = null;
		StringTokenizer stk = null;
		String cid = null;
		double lat;
		double lon;
		String time = null;
		double minlat, minlon, maxlat, maxlon;
		SimpleDateFormat sdfmat = new SimpleDateFormat("mmssSSS");
		DecimalFormat dfmat = new DecimalFormat("#.000000");
		StringBuffer sbuf = new StringBuffer();
		Random ran = new Random();

		// 获取地图的大小
		read = new InputStreamReader(new FileInputStream(finSize));
		buf = new BufferedReader(read);
		value = buf.readLine();
		stk = new StringTokenizer(value);
		minlat = Double.parseDouble(stk.nextToken());
		minlon = Double.parseDouble(stk.nextToken());
		maxlat = Double.parseDouble(stk.nextToken());
		maxlon = Double.parseDouble(stk.nextToken());

		// 车辆的实际地理坐标
		str = "";
		read = new InputStreamReader(new FileInputStream(finCar));
		buf = new BufferedReader(read);
		out = new FileWriter(foutCar);
		while ((value = buf.readLine()) != null) {
			stk = new StringTokenizer(value);
			if (1 == stk.countTokens()) {
				String date = sdfmat.format(new Date());
				for (int i = 0; i < 4; i++) {
					sbuf.append(ran.nextInt(10));
				}
				cid = date + sbuf.toString();
				sbuf.setLength(0);
				continue;
			}
			lon = Double.parseDouble(stk.nextToken());
			lat = Double.parseDouble(stk.nextToken());
			lat = minlat + (maxlat - minlat) * (1000 - lat) / 1000;
			lon = minlon + (maxlon - minlon) * lon / 1000;
			time = stk.nextToken();
			str += cid + " " + dfmat.format(lat) + " " + dfmat.format(lon)
					+ " " + time + '\n';
		}
		out.write(str);
		out.close();
		buf.close();

	}

}
